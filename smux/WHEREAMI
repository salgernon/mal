https://github.com/kanaka/mal/blob/master/process/guide.md


  make "test^smux^step0"

=> ok

  make "test^smux^step1"

.. When a string is read, the following transformations are applied: a
backslash followed by a doublequote is translated into a plain
doublequote character, a backslash followed by "n" is translated into
a newline, and a backslash followed by another backslash is translated
into a single backslash.

.. To properly print a string (for step 4 string functions), the pr_str
function needs another parameter called print_readably. When
print_readably is true, doublequotes, newlines, and backslashes are
translated into their printed representations (the reverse of the
reader). The PRINT function in the main program should call pr_str
with print_readably set to true.

√ ... Add error checking to your reader functions to make sure parens are
properly matched. Catch and print these errors in your main loop. If
your language does not have try/catch style bubble up exception
handling, then you will need to add explicit error handling to your
code to catch and pass on errors without crashing.

?? Add support for reader macros which are forms that are transformed
into other forms during the read phase. Refer to
tests/step1_read_print.mal for the form that these macros should take
(they are just simple transformations of the token stream).

√ Add support for the other mal types: keyword, vector, hash-map.

√ ... ok hash-map: a hash-map is an associative data structure that
maps strings to other mal values. If you implement keywords as
prefixed strings, then you only need a native associative data
structure which supports string keys. Clojure allows any value to be a
hash map key, but the base functionality in mal is to support strings
and keyword keys. Because of the representation of hash-maps as an
alternating sequence of keys and values, you can probably use the same
reader function for hash-maps as lists and vectors with parameters to
indicate the starting and ending tokens. The odd tokens are then used
for keys with the corresponding even tokens as the values.

√ Add comment support to your reader. The tokenizer should ignore
tokens that start with ";". Your read_str function will need to
properly handle when the tokenizer returns no values. The simplest way
to do this is to return nil mal value. A cleaner option (that does not
print nil at the prompt is to throw a special exception that causes
the main loop to simply continue at the beginning of the loop without
calling rep.

